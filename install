#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var Promise = require('bluebird');
var git = require('nodegit');
var mv = require('mv');

var plugins = require('./plugins');
var config = require('./config');
var paths = config.paths;
var permissionsToSet = config.permissionsToSet;

function createDir(dirPath) {
    return Promise.promisify(fs.mkdir, { context: fs })(dirPath);
}

function ensureDirExists(dirPath) {
    var promisedAccess = Promise.promisify(fs.access, { context: fs });
    return promisedAccess(dirPath, fs.F_OK).catch(createDir.bind(null, dirPath));
}

function ensureDirPermissions(dirPath) {
    return Promise.promisify(fs.chmod, { context: fs })(dirPath, permissionsToSet);
}

function getSubDirPaths() {
    var filterVimKey = function(key) { return key !== 'VIMDIR' };
    var getDirPath = function(key) { return paths[key] };
    return Object.keys(paths).filter(filterVimKey).map(getDirPath);
}
    
function ensureSubDirsExist() {
    return Promise.all(getSubDirPaths().map(ensureDirExists));
}
        
function ensureSubDirsPermissions() {
    return Promise.all(getSubDirPaths().map(ensureDirPermissions));
}

// Returns an array of promises to execute in parallel.
function getPluginPromises() {
    return Object.keys(plugins).reduce(function(promiseAccumulator, key) {
        return promiseAccumulator.concat(
            Object.keys(plugins[key]).map(function(subKey) {
                // `git.Clone` returns a promise
                return git.Clone(plugins[key][subKey], subKey);
            })
        );
    }, []);
}

function moveFiles() {
    Object.keys(plugins).forEach(function(key) {
        Object.keys(plugins[key]).forEach(function(subKey) {
            switch (key) {
                case 'manager':
                    return mv(path.join(__dirname, subKey, '*'), paths.VIMDIR, function() {});
                case 'bundles':
                    return mv(path.join(__dirname, subKey), paths.BUNDLEDIR, function() {});
                case 'colors':
                    return mv(path.join(__dirname, subKey), paths.COLORSDIR, function() {});
            }
        });
    });
}
        

function installPlugins() {
    return Promise.all(getPluginPromises())
        .then(moveFiles);
}

function logOutcome(err) {
    if (!err) {
        console.log('\n...Installation successful!\n');
    }
    else {
        console.error('\n...UH OH! An error occurred.');
        console.error(err + '\n');
    }
}

function install() {
    ensureDirExists(paths.VIMDIR)
        .then(ensureDirPermissions.bind(null, paths.VIMDIR))
        .then(ensureSubDirsExist)
        .then(ensureSubDirsPermissions)
        .then(installPlugins)
        .then(logOutcome)
        .catch(logOutcome);
}

install();

